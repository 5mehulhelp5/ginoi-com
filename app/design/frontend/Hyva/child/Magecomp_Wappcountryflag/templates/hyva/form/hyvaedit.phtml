<?php
/**
 * Hyvä Themes - https://hyva.io
 * Copyright © Hyvä Themes 2020-present. All rights reserved.
 * This product is licensed per Magento install
 * See https://hyva.io/license
 */

declare(strict_types=1);

use Magento\Customer\Block\Address\Edit;
use Magento\Customer\ViewModel\Address as AddressViewModel;
use Magento\Framework\Escaper;
use Magento\Framework\View\Helper\SecureHtmlRenderer;

/** @var Edit $block */
/** @var Escaper $escaper */
/** @var SecureHtmlRenderer $secureRenderer */

/** @var AddressViewModel $addressViewModel */
$addressViewModel = $block->getViewModel();

$companyBlock = $block->getLayout()->createBlock(\Magento\Customer\Block\Widget\Company::class);
$phoneBlock = $block->getLayout()->createBlock(\Magento\Customer\Block\Widget\Telephone::class);
$faxBlock = $block->getLayout()->createBlock(\Magento\Customer\Block\Widget\Fax::class);
$streetLabel = $block->getAttributeData()->getFrontendLabel('street');
$regionLabel = $block->getAttributeData()->getFrontendLabel('region');
$showOptionalRegions = $block->getConfig('general/region/display_all');
$countryBlock = $block->getLayout()->createBlock(Magecomp\Wappcountryflag\Block\IntPhoneInput::class);
?>

<style>
    fieldset~fieldset {
        margin-top: 0;
    }
    .form-input, .form-select, .iti {
        width: 100%;
    }

</style>

<!-- <div id="smserrordiv" name="smserrordiv" class="message error"></div> -->
<h1 class="mb-6 text-2xl block-title font-bold border-l-4 border-[#3E06B0] text-primary-purple pl-4 py-2">
    <?php if($block->getAddress()->getId()): ?>
        <?= $escaper->escapeHtml(__('Customer Address')) ?>
    <?php else: ?>
        <?= $escaper->escapeHtml(__('Add a New Address')) ?>
    <?php endif; ?>
</h1>

<form class="form-address-edit"
      x-data="Object.assign(initCustomerAddressEdit(), hyva.formValidation($el))"
      @private-content-loaded.window="onPrivateContentLoaded($event.detail.data)"
      @submit="onSubmit"
      action="<?= $escaper->escapeUrl($block->getSaveUrl()) ?>"
      method="post"
      id="form-validate"
      enctype="multipart/form-data"
      data-hasrequired="<?= $escaper->escapeHtmlAttr(__('* Required Fields')) ?>"
>
    <div class="p-4 rounded-2xl border lg:grid grid-cols-2 gap-x-6">
    <fieldset class="fieldset mb-4">
        <legend class="mb-3 text-lg font-medium text-primary-purple"><span><?= $escaper->escapeHtml(__('Personal Information')) ?></span></legend>
        <?= $block->getBlockHtml('formkey') ?>
        <input type="hidden" name="success_url" value="<?= $escaper->escapeUrl($block->getSuccessUrl()) ?>">
        <input type="hidden" name="error_url" value="<?= $escaper->escapeUrl($block->getErrorUrl()) ?>">

        <div>
            <?= $block->getNameBlockHtml() ?>

            <?php if ($companyBlock->isEnabled()): ?>
                <div class="w-full">
                    <?= $companyBlock->setCompany($block->getAddress()->getCompany())->toHtml() ?>
                </div>
            <?php endif ?>

            <?php if ($phoneBlock->isEnabled()): ?>
                <div class="w-full" id="mobile-flag">
                    <?= $phoneBlock->setTelephone($block->getAddress()->getTelephone())->toHtml() ?>
                    <div id="smserror" name="smserror" generated="true" class="mage-error" style="margin-top: -15px;"></div>
                </div>

                <input type="hidden" value="" id="countryreg" name="countryreg">
            <?php endif ?>

            <?php if ($faxBlock->isEnabled()): ?>
                <div class="field field-reserved w-full">
                    <?= $faxBlock->setFax($block->getAddress()->getFax())->toHtml() ?>
                </div>
            <?php endif ?>
        </div>

        <?php if (! $block->isDefaultBilling() && $block->canSetAsDefaultBilling()): ?>
            <div class="field choice set billing">
                <input type="checkbox" id="primary_billing" name="default_billing" value="1" class="checkbox rounded">
                <label class="label" for="primary_billing">
                    <span><?= $escaper->escapeHtml(__('Use as my default billing address')) ?></span>
                </label>
            </div>
        <?php else: ?>
            <input type="hidden" name="default_billing" value="1"/>
        <?php endif; ?>

        <?php if (! $block->isDefaultShipping() && $block->canSetAsDefaultShipping()): ?>
            <div class="field choice set shipping">
                <input type="checkbox" id="primary_shipping" name="default_shipping" value="1" class="checkbox rounded">
                <label class="label" for="primary_shipping">
                    <span><?= $escaper->escapeHtml(__('Use as my default shipping address')) ?></span>
                </label>
            </div>
        <?php else: ?>
            <input type="hidden" name="default_shipping" value="1">
        <?php endif; ?>
    </fieldset>
    <fieldset class="fieldset">
        <legend class="mb-3 text-lg font-medium text-primary-purple"><span><?= $escaper->escapeHtml(__('Address')) ?></span></legend>
        <div>
            <div class="street w-full">

                <div class="field field-reserved">
                    <label for="street_1" class="label">
                        <span><?= /* @noEscape */ $streetLabel ?></span>
                    </label>
                    <div class="control">
                        <input type="text"
                               name="street[]"
                               required
                               value="<?= $escaper->escapeHtmlAttr($block->getStreetLine(1)) ?>"
                               title="<?= /* @noEscape */ $streetLabel ?>"
                               id="street_1"
                               class="form-input"
                        />
                    </div>
                </div>

                <?php for ($i = 1, $n = $addressViewModel->addressGetStreetLines(); $i < $n; $i++): ?>
                    <div class="field additional field-reserved">
                        <label class="label" for="street_<?= /* @noEscape */ $i + 1 ?>">
                            <span><?= $escaper->escapeHtml(__('Street Address %1', $i + 1)) ?></span>
                        </label>
                        <div class="control">
                            <input type="text" name="street[]"
                                   value="<?= $escaper->escapeHtmlAttr($block->getStreetLine($i + 1)) ?>"
                                   title="<?= $escaper->escapeHtmlAttr(__('Street Address %1', $i + 1)) ?>"
                                   id="street_<?= /* @noEscape */ $i + 1 ?>"
                                   class="form-input"
                            />
                        </div>
                    </div>
                <?php endfor; ?>
            </div>

            <?php if ($addressViewModel->addressIsVatAttributeVisible()): ?>
                <div class="field field-reserved taxvat w-full">
                    <label class="label" for="vat_id">
                        <span><?= /* @noEscape */ $block->getAttributeData()->getFrontendLabel('vat_id') ?></span>
                    </label>
                    <div class="control">
                        <input type="text"
                               name="vat_id"
                               value="<?= $escaper->escapeHtmlAttr($block->getAddress()->getVatId()) ?>"
                               title="<?= /* @noEscape */ $block->getAttributeData()->getFrontendLabel('vat_id') ?>"
                               class="form-input"
                               id="vat_id">
                    </div>
                </div>
            <?php endif; ?>
            <div class="field field-reserved zip w-full">
                <label class="label" for="zip">
                    <span>
                        <?= /* @noEscape */ $block->getAttributeData()->getFrontendLabel('postcode') ?>
                    </span>
                </label>
                <div class="control">
                    <input type="text"
                           name="postcode"
                           x-ref="postcode"
                           value="<?= $escaper->escapeHtmlAttr($block->getAddress()->getPostcode()) ?>"
                           title="<?= /* @noEscape */ $block->getAttributeData()->getFrontendLabel('postcode') ?>"
                           id="zip"
                           :required="isZipRequired"
                           @change="onChange"
                           data-validate='{"postcode": true}'
                           class="form-input">
                </div>
            </div>

            <div class="field field-reserved city w-full">
                <label class="label" for="city">
                    <span><?= /* @noEscape */ $block->getAttributeData()->getFrontendLabel('city') ?></span>
                </label>
                <div class="control">
                    <input type="text"
                           name="city"
                           required
                           value="<?= $escaper->escapeHtmlAttr($block->getAddress()->getCity()) ?>"
                           title="<?= $escaper->escapeHtmlAttr(__('City')) ?>"
                           class="form-input"
                           id="city">
                </div>
            </div>

            <div class="field field-reserved country w-full">
                <label class="label" for="country">
                    <span>
                        <?= /* @noEscape */ $block->getAttributeData()->getFrontendLabel('country_id') ?>
                    </span>
                </label>
                <div class="control">
                    <?php $countries = $block
                        ->getCountryCollection()
                        ->setForegroundCountries($block->getTopDestinations())
                        ->toOptionArray();
                    ?>
                    <select name="country_id"
                            id="country"
                            title="Country"
                            required
                            class="form-select"
                            x-ref="country_id"
                            @change="changeCountry($event.target)"
                    >
                        <?php foreach ($countries as $country): ?>
                            <option name="<?= /** @noEscape */ $country['label'] ?>"
                                    value="<?= /** @noEscape */ $country['value'] ?>"
                                    data-is-zip-required="<?= (isset($country['is_zipcode_optional'])) ? '0' : '1' ?>"
                                    data-is-region-required="<?= (isset($country['is_region_required'])) ? '1' : '0' ?>"
                                <?= ($block->getCountryId() ===  $country['value']) ? 'selected="selected"' : '' ?>
                            >
                                <?= /** @noEscape */ $country['label'] ?>
                            </option>
                        <?php endforeach; ?>
                    </select>
                </div>
            </div>

            <div class="field field-reserved region w-full"
                 x-cloak
                 x-show="(hasAvailableRegions() && isRegionRequired) || showOptionalRegions"
            >
                <label class="label" for="region_id">
                    <span><?= /* @noEscape */ $regionLabel ?></span>
                </label>
                <div class="control">
                    <template x-if="hasAvailableRegions() && isRegionRequired">
                        <select id="region_id" name="region_id"
                                title="<?= /* @noEscape */ $regionLabel ?>"
                                class="form-select validate-select region_id"
                                x-ref="region_id"
                                x-model="selectedRegion"
                                @change="$refs.region.value = availableRegions[selectedRegion].name"
                        >
                            <option value=""><?= $escaper->escapeHtml(__('Please select a region, state or province.')) ?></option>
                            <template x-for="regionId in Object.keys(availableRegions)">
                                <option :value="regionId"
                                        :name="availableRegions[regionId].name"
                                        x-text="availableRegions[regionId].name"
                                        :selected="selectedRegion === regionId"
                                >
                                </option>
                            </template>
                        </select>
                    </template>
                    <input :type="hasAvailableRegions() ? 'hidden' : 'text'"
                           id="region"
                           name="region"
                           x-ref="region"
                           value="<?= $escaper->escapeHtmlAttr($block->getRegion()) ?>"
                           title="<?= /* @noEscape */ $regionLabel ?>"
                           class="form-input"
                           :required="isRegionRequired"
                    />
                </div>
            </div>
        </div>

        <?php $isDefaultMessages = array_filter([
            $block->isDefaultBilling() ? __("It's a default billing address.") : null,
            $block->isDefaultShipping() ? __("It's a default shipping address.") : null,
        ]) ?>
        <?php if ($isDefaultMessages): ?>
            <div class="message">
                <?= $escaper->escapeHtml(implode("<br>\n", $isDefaultMessages), ['br']) ?>
            </div>
        <?php endif; ?>
    </fieldset>
    </div>
    <div class="actions-toolbar border-none !pt-0">
        <div class="primary">
            <button type="submit"
                    class="action save primary uppercase"
                    data-action="save-address"
                    title="<?= $escaper->escapeHtmlAttr(__('Save Address')) ?>">
                <span><?= $escaper->escapeHtml(__('Save Address')) ?></span>
            </button>
        </div>
        <div class="secondary">
            <a class="action text-primary-purple underline underline-offset-4" href="<?= $escaper->escapeUrl($block->getBackUrl()) ?>">
                <span><?= $escaper->escapeHtml(__('Back')) ?></span>
            </a>
        </div>
    </div>
</form>

<script>
    function initCustomerAddressEdit() {
        return {
            directoryData: {},
            availableRegions: {},
            messageTime: 5000,
            fieldsNames: [],
            selectedRegion: '<?= $escaper->escapeJs($block->getRegion() ?: 0) ?>',
            isZipRequired: true,
            isRegionRequired: true,
            showOptionalRegions: <?= $showOptionalRegions ? 'true' : 'false' ?>,
            onPrivateContentLoaded(data) {
                this.directoryData = data['directory-data'] || {};

                <?php if ($block->getCountryId()): ?>
                this.setCountry(this.$refs['country_id'], '<?= $escaper->escapeJs($block->getRegion()) ?>');
                <?php endif; ?>

            },
            setRegionInputValue(regionName) {
                this.$nextTick(() => {
                    const regionInputElement = this.$refs['region'];
                    if (regionInputElement) {
                        regionInputElement.value = regionName;
                    }
                })
            },
            setCountry(countrySelectElement, initialRegion) {
                const selectedOption = countrySelectElement.options[countrySelectElement.selectedIndex];
                const countryCode = countrySelectElement.value;
                const countryData = this.directoryData[countryCode] || false;

                if (!countryData) {
                    this.setRegionInputValue('');
                    return;
                }

                this.isZipRequired = selectedOption.dataset.isZipRequired === '1';
                this.isRegionRequired = selectedOption.dataset.isRegionRequired === '1';

                this.availableRegions = countryData.regions || {};

                const initialRegionId = Object.keys(this.availableRegions).filter(regionId => this.availableRegions[regionId].name === initialRegion)[0];
                this.selectedRegion = initialRegionId || '0';
                this.setRegionInputValue(initialRegionId && this.availableRegions[initialRegionId].name || '');
            },

            changeCountry(countrySelectElement, initialRegion) {
                this.setCountry(countrySelectElement, initialRegion);

                this.validateCountryDependentFields();
            },
            validateCountryDependentFields() {
                this.$nextTick(() => {
                    <?php /* Reinitialize validation rules for fields that depend on the country */ ?>
                    delete this.fields['postcode'];
                    delete this.fields['region'];
                    <?php /* Initialize country_id, too, because the postcode validation depends on it */ ?>
                    this.setupField(this.$refs['country_id']);
                    this.setupField(this.$refs['postcode']);
                    this.setupField(this.$refs['region']);

                    this.fields['postcode'] && this.validateField(this.fields['postcode']);
                    this.fields['region'] && this.validateField(this.fields['region']);
                })
            },
            hasAvailableRegions() {
                return Object.keys(this.availableRegions).length > 0;
            }
        }
    }

    window.addEventListener('DOMContentLoaded', () => {

        hyva.formValidation.addRule('telephone', (value, options) => {
            const phoneNumber =  value.trim().replace(' ', '');
            if (phoneNumber && phoneNumber.length < (options.minlength || 3)) {
                return '<?= $escaper->escapeJs(__('The telephone number is too short.')) ?>';
            }
            return true;
        });

        const postCodeSpecs = <?= /* @noEscape */ $block->getPostCodeConfig()->getSerializedPostCodes() ?>;

        hyva.formValidation.addRule('postcode', (postCode, options, field, context) => {
            context.removeMessages(field, 'postcode-warning')
            const countryId = (context.fields['country_id'] && context.fields['country_id'].element.value),
                  validatedPostCodeExamples = [],
                  countryPostCodeSpecs = countryId && postCodeSpecs ? postCodeSpecs[countryId] : false;

            if (! postCode || ! countryPostCodeSpecs) return true;

            for (const postCodeSpec of Object.values(countryPostCodeSpecs)) {
                if (new RegExp(postCodeSpec.pattern).test(postCode)) return true;
                validatedPostCodeExamples.push(postCodeSpec.example);
            }
            if (validatedPostCodeExamples) {
                context.addMessages(field, 'postcode-warning', [
                    '<?= $escaper->escapeJs(__('Provided Zip/Postal Code seems to be invalid.')) ?>',
                    '<?= $escaper->escapeJs(__('Example: ')) ?>' + validatedPostCodeExamples.join('; ') + '. ',
                    '<?= $escaper->escapeJs(__('If you believe it is the right one you can ignore this notice.')) ?>'
                ]);
            }

            return true;
        });
    })
</script>

<?php
define('BUILD_VERSION', '1.0.2');
define('DEBUG_MODE', false); // DEBUG
define('PHONE_INPUT_ELEMENT', 'input[name="telephone"]');

?>

<?php if (DEBUG_MODE) : ?>
    <pre>
                DetectByIp: <?php /* @noEscape*/ echo $countryBlock->getDetectByIp(); ?>
        <br />
                CurrentIP: <?php print_r($countryBlock->getCustomerIPDetails()); ?>
    </pre>
<?php endif; ?>

<script>

    const phoneInputField = document.querySelector("#telephone");
    function Smsresetdata() {
        var int_phone_input_element = document.querySelector("#telephone");
        int_phone_input_element.classList.remove('mage-error');
        document.querySelector('#smserror').innerHTML = '';
    }

    function isNumeric(n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
    }

    document.addEventListener('DOMContentLoaded', function() {
        var saveAddressButton = document.querySelector('button.action.save.primary[data-action="save-address"]');

        saveAddressButton.addEventListener('click', function() {

            var telephoneInput = document.getElementById('telephone');

            if (telephoneInput.value === '' || telephoneInput.value === '1') {
                document.getElementById('smserror').innerHTML = 'This field is required';

                saveAddressButton.disabled = true;
            }
        });
    });

    var countryCode = '';
    if (localStorage.getItem("countrycode") != null) {
        if (localStorage.getItem("countrycode").toUpperCase() === 'US' || localStorage.getItem("countrycode").toUpperCase() === 'CA') {
            var phoneNumber = document.getElementById('telephone').value.trim();
            if(phoneNumber.startsWith('+1')){
                var areaCode = phoneNumber.substring(2, 5);
            }
            else{
                areaCode = phoneNumber.substring(0, 3);
            }
            var usAreaCodes = /^(201|202|203|205|206|207|208|209|210|212|213|214|215|216|217|218|219|224|225|227|228|229|231|234|239|240|248|251|252|253|254|256|260|262|267|269|270|276|281|301|302|303|304|305|307|308|309|310|312|313|314|315|316|317|318|319|320|321|323|325|330|331|334|336|337|339|340|345|346|347|351|352|360|361|364|385|386|401|402|404|405|406|407|408|409|410|412|413|414|415|417|419|423|424|425|430|432|434|435|440|442|443|458|463|469|470|473|475|478|479|480|484|501|502|503|504|505|507|508|509|510|512|513|515|516|517|518|520|530|531|534|539|540|541|551|559|561|562|563|564|567|570|571|573|574|575|580|585|586|601|602|603|605|606|607|608|609|610|612|614|615|616|617|618|619|620|623|626|630|631|636|641|646|649|650|651|657|660|661|662|667|669|678|679|681|682|689|701|702|703|704|706|707|708|710|712|713|714|715|716|717|718|719|720|724|725|727|731|732|734|737|740|743|747|754|757|758|760|762|763|765|769|770|772|773|774|775|779|781|784|785|786|787|801|802|803|804|805|806|808|809|810|812|813|814|815|816|817|818|828|830|831|832|835|843|845|847|848|849|850|854|856|857|858|859|860|862|863|864|865|868|869|870|872|878|901|903|904|906|907|908|909|910|912|913|914|915|916|917|918|919|920|925|927|928|929|931|936|937|939|940|941|947|949|951|952|954|956|957|959|970|971|972|973|975|978|979|980|984|985|989)$/;
            var caAreaCodes = /^(226|236|249|354|365|367|437|548|581|587|600|639|672|742|825)$/;

            var sameCodes = /^(204|250|289|306|343|403|416|418|431|438|450|506|514|519|579|604|613|647|705|709|778|780|782|807|819|867|873|902|905)$/;

            if (usAreaCodes.test(areaCode)) {
                countryCode = 'US';
            } else if (caAreaCodes.test(areaCode)) {
                countryCode = 'CA';
            }
            else if(sameCodes.test(areaCode)){
                countryCode = localStorage.getItem("countrycode").toUpperCase();
            }
        } else {
            countryCode = country;
        }
    }
    var initialCountry = countryCode || "<?= /* @noEscape*/ $countryBlock->getDefualtCountry(); ?>";
    const phoneInput = window.intlTelInput(phoneInputField,
        {
            initialCountry: initialCountry,
            utilsScript: "<?php /* @noEscape*/ echo $block->getViewFileUrl('Magecomp_Wappcountryflag::hyva/js/hyvaIntlTelInput.min.js'); ?>",
        });
    activeCountryElement = document.querySelector(".iti__country.iti__active");
    countrycodeval = '+'+activeCountryElement.getAttribute('data-dial-code');

    phoneInputField.value = countrycodeval+document.getElementById('telephone').value;
    var activeCountryElement = document.querySelector(".iti__country.iti__active");
    document.getElementById('countryreg').value = countryreg;

    phoneInputField.addEventListener("countrychange", function()
    {
        activeCountryElement = document.querySelector(".iti__country.iti__active");
        countrycodeval = '+'+activeCountryElement.getAttribute('data-dial-code');

        phoneInputField.value = countrycodeval;
    });

    document.querySelector("input[name='telephone']").addEventListener("keydown", function(event) {

        var selectedFlagElement = document.querySelector(".iti__selected-flag");
        var titleAttributeValue = selectedFlagElement.getAttribute("title");
        var telephoneInput = document.querySelector('input[name="telephone"]');
        var telephoneValue = telephoneInput.value;
        activeCountryElement = document.querySelector(".iti__country.iti__active");
        countrycodeval = '+'+activeCountryElement.getAttribute('data-dial-code');
        var text = telephoneValue.substring(0, titleAttributeValue.split('+')[1].length);
        if (!countrycodeval.includes(text)) {
            var telephoneInput = document.querySelector('input[name="telephone"]');
            telephoneInput.value = '+'+titleAttributeValue.split('+')[1] + telephoneValue;
        }
        if ((event.key === 'Backspace' || event.keyCode === 8) && countrycodeval==telephoneValue) {
            event.preventDefault();
        }
    });
    phoneInputField.setAttribute('type','tel');

    //    phoneInputField.value = '+1';

    document.getElementById("telephone").addEventListener("keyup", function(e) {
        var temp = false;

        const length = phoneInputField.value.length;
        phoneInputField.setSelectionRange(length, length);
        var mobile = phoneInputField.value;

        activeCountryElement = document.querySelector(".iti__country.iti__active");
        countrycodeval = activeCountryElement.getAttribute('data-dial-code');
        countrycodeval1 = activeCountryElement.getAttribute('data-country-code');
        if(countrycodeval == 1){
            localStorage.setItem("countrycode",countrycodeval1);
        }
        var mobilelength = phoneInputField.value.length-1;
        fetch('<?php /* @noEscape*/ echo $this->getUrl('countryflag/customer/hyvavalidate')?>', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                mobile: mobile,
                countrycodeval: countrycodeval,
                mobilelength: mobilelength,
                countrycodeval1 : countrycodeval1,
                formkey : hyva.getFormKey()
            }),
        })
        .then(response => response.json())
        .then(data => {
            phoneInputField.setAttribute('maxlength', data.digit);

            if(data.validate == true) {

                document.querySelector('#smserror').innerHTML = '';
                document.querySelector('button.action.save.primary[data-action="save-address"]').disabled = false;
            }
            else
            {
                if (temp == false) {
                    document.querySelector('#smserror').innerHTML = data.message;
                }
                document.querySelector('button.action.save.primary[data-action="save-address"]').disabled = true;
            }
        });
    });

</script>
<style>
    #smserror{
        width: 300px;
        color: red;
    }
    .telephone .messages{
        display : none;
    }
</style>
